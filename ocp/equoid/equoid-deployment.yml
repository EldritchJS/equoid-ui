#
# Application template.
#
# This defines all the configurable parameters and other objects that are needed to run the jHipster application
# service. This template can even be saved in OpenShift namespace as well so that have the flexibility to do any project specific
# customizations. Pls note wherever displayName says *** PLEASE DO NOT CHANGE THIS ***, don't touch that as those parameters will be
# referenced in other places.
#
apiVersion: v1
kind: Template
metadata:
  name: equoid-app-template
  namespace: equoid
  annotations:
    description: This template defines objects that are required to spin up an equoid service pod
    tags: equoid, service
    openshift.io/display-name: equoid-template
    openshift.io/long-description: This template provides objects that are required to spin up a equoid service pod.
    openshift.io/provider-display-name: Equoid
labels:
  app: equoid-app
  createdBy: radanalytics.io
parameters:
  -
    name: APPLICATION_NAME
    value: equoid
    description: Name of the application
    required: true
    displayName: Application Name
  -
    name: SECRET_REF
    value: equoid-ds-secret-ref
    description: Name of the DataSource Secret Reference
    required: true
    displayName: "*** PLEASE DO NOT CHANGE THIS ***"
  -
    name: REG_SECRET_REF
    value: reg-secret-ref
    description: Name of the Registry Secret Reference
    required: true
    displayName: "*** PLEASE DO NOT CHANGE THIS ***"
  -
    name: APP_PORT
    value: "8080"
    description: Port of the application
    required: true
    displayName: Application Port
objects:
  -
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${APPLICATION_NAME}
    spec:
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 600
          maxUnavailable: 25%
          maxSurge: 25%
#          pre:
#            failurePolicy: ignore
#            execNewPod:
#              command:
#                - "/bin/sh"
#                - "-c"
#                - |
#                    while true
#                    do
#                      rt=$(nc -z -w 1 ${APPLICATION_NAME}-postgresqldb 80)
#                      if [ $? -eq 0 ]; then
#                        echo "DB is UP"
#                        break
#                      fi
#                      echo "DB is not yet reachable;sleep for 10s before retry"
#                      sleep 10
#                    done
#              containerName: ${APPLICATION_NAME}
        resources:
      replicas: "1"
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
        spec:
          containers:
          - name: ${APPLICATION_NAME}
            image: jkremser/equoid
            imagePullPolicy: IfNotPresent
            env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod,swagger
#            - name: SPRING_DATASOURCE_URL
##              value: jdbc:postgresql://${APPLICATION_NAME}-postgresqldb/${APPLICATION_NAME}
#              value: jdbc:h2:mem:equoid;DB_CLOSE_DELAY=-1
#            - name: SPRING_DATASOURCE_USERNAME
#              valueFrom:
#                secretKeyRef:
#                  name: ${SECRET_REF}
#                  key: database-user
#            - name: SPRING_DATASOURCE_PASSWORD
#              valueFrom:
#                secretKeyRef:
#                  name: ${SECRET_REF}
#                  key: database-password
            - name: JHIPSTER_METRICS_LOGS_ENABLED
              value: "true"
            - name: JHIPSTER_METRICS_PROMETHEUS_ENABLED
              value: "true"
            - name: JHIPSTER_METRICS_PROMETHEUS_ENDPOINT
              value: "/prometheusMetrics"
            ports:
            - name: http
              containerPort: "${APP_PORT}"
  -
    apiVersion: v1
    kind: Service
    metadata:
      annotations:
        service.alpha.openshift.io/dependencies: '[{
          "name":"keycloak", "namespace": "", "kind": "Service"}]'
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      selector:
        app: ${APPLICATION_NAME}
      type: LoadBalancer
      ports:
      - name: http
        port: "${APP_PORT}"
  -
    apiVersion: v1
    kind: Route
    metadata:
      name: ${APPLICATION_NAME}
    spec:
      to:
        kind: Service
        name: ${APPLICATION_NAME}
        weight: "100"
      port:
        targetPort: "http"
      wildcardPolicy: None
